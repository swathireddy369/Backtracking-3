// Time Complexity : O((m*n)*3^l)
// Space Complexity : O(l)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach:here first i found word first letter from board and if it is then marking node as visited by using @ because i need starting poing ,then explore possible  
// adjacent elements to find next letter from word by itteraing dirs array,if it does not matches then backtarcking to mark node univisited as well where my index is go behond the lenth of word then returning true  and 
class Solution {
    public boolean exist(char[][] board, String word) {
        int[][] dirs={{0,1},{-1,0},{0,-1},{1,0}};
        for(int i=0;i<board.length;i++){ //m*n (m is board.length and n is board[0].length)
              for(int j=0;j<board[0].length;j++){
                if(board[i][j] == word.charAt(0)){
                     if(backtrack(board,i,j,0,word,dirs))return true;
                }
        }
    }
    return false;
}

public boolean backtrack(char[][] board,int r,int c,int index, String word, int[][] dirs){//3^l (where l is length of word)
    if(index==word.length())return true;
    if(r < 0 || c < 0|| r >= board.length || c >= board[0].length ||board[r][c] == '@')return false;

            if(board[r][c] ==word.charAt(index)){
                board[r][c] = '@';
                for(int[] dir:dirs){
                    int nr=r+dir[0];
                    int nc=c+dir[1];
                    if(backtrack(board,nr,nc,index+1,word,dirs))return true;
                }
                  board[r][c] =word.charAt(index);
            }
return false;
}
}